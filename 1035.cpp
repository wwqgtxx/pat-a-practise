#include<iostream>
#include<iomanip>
#include<map>
#include<string>
#include<sstream>
#include<vector>
#include<set>
#include<cstdint>
#include<cmath>
#include<deque>
#include<queue>
#include<list>
#include<algorithm>
#include<iterator>

int main(){
	int n;
	std::cin >> n;
	std::vector<std::pair<std::string,std::string>> vec(n);
	std::string str1,str2;
	for(int i=0;i<n;i++){
		std::cin >> vec[i].first >> vec[i].second;
	}
	if(n == 1){
		std::cout << "There is 1 account and no account is modified" << std::endl;
		return 0;
	}
	std::vector<std::pair<std::string,std::string>> vec2;
	vec.reserve(n);
	for(auto &item : vec){
		auto &name = item.first;
		auto &password = item.second;
		bool was_changed = false;
		for(auto &c : password){
			switch(c){
				case '1':{
					c = '@';
					was_changed = true;
					break;
				}
				case '0':{
					c = '%';
					was_changed = true;
					break;
				}
				case 'l':{
					c = 'L';
					was_changed = true;
					break;
				}
				case 'O':{
					c = 'o';
					was_changed = true;
					break;
				}
			}
		}
		if(was_changed){
			vec2.emplace_back(name,password);
		}
		
	}
	if(vec2.empty()){
		std::cout << "There are " << n << " accounts and no account is modified" << std::endl;
	}else{
		std::cout << vec2.size() << std::endl;
		for(auto &item:vec2){
			std::cout << item.first << ' ' << item.second << std::endl;
		}
	}
	return 0;
} 
/*
1035. Password (20)
时间限制
400 ms
内存限制
65536 kB
代码长度限制
16000 B
判题程序
Standard
作者
CHEN, Yue
To prepare for PAT, the judge sometimes has to generate random passwords for the users. The problem is that there are always some confusing passwords since it is hard to distinguish 1 (one) from l (L in lowercase), or 0 (zero) from O (o in uppercase). One solution is to replace 1 (one) by @, 0 (zero) by %, l by L, and O by o. Now it is your job to write a program to check the accounts generated by the judge, and to help the juge modify the confusing passwords.

Input Specification:

Each input file contains one test case. Each case contains a positive integer N (<= 1000), followed by N lines of accounts. Each account consists of a user name and a password, both are strings of no more than 10 characters with no space.

Output Specification:

For each test case, first print the number M of accounts that have been modified, then print in the following M lines the modified accounts info, that is, the user names and the corresponding modified passwords. The accounts must be printed in the same order as they are read in. If no account is modified, print in one line "There are N accounts and no account is modified" where N is the total number of accounts. However, if N is one, you must print "There is 1 account and no account is modified" instead.

Sample Input 1:

3
Team000002 Rlsp0dfa
Team000003 perfectpwd
Team000001 R1spOdfa
Sample Output 1:
2
Team000002 RLsp%dfa
Team000001 R@spodfa
Sample Input 2:
1
team110 abcdefg332
Sample Output 2:
There is 1 account and no account is modified
Sample Input 3:
2
team110 abcdefg222
team220 abcdefg333
Sample Output 3:
There are 2 accounts and no account is modified
*/
